{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","height","setHeight","weight","setWeight","bmi","setBMI","bmiCategory","setBmiCategory","chart","setChart","minWeight","setMinWeight","maxWeight","setMaxWeight","useEffect","calculateBMI","BMIcategory","IBWmin","IBWmax","className","toFixed","type","placeholder","value","onChange","e","target","style","margin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA0GeA,MAvGf,WACE,MAA4BC,mBAAS,KAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAsBJ,mBAAS,OAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KACA,EAAsCN,qBAAtC,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAA0BR,qBAA1B,mBAAOS,EAAP,KAAcC,EAAd,KACA,EAAkCV,mBAAS,MAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KACA,EAAkCZ,mBAAS,MAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACRC,IACAC,IACAC,IACAC,MACC,CAACd,EAAKJ,EAAQE,EAAQI,EAAaE,IAEtC,IAQMO,EAAe,WACnBV,EAAOH,EAAM,SAAIF,EAAS,IAAQ,KAG9BgB,EAAc,WACdZ,EAAM,IACRG,EAAe,4BACfE,EAAS,UACAL,GAAO,IAAMA,EAAM,IAC5BG,EAAe,uBACfE,EAAS,QACAL,GAAO,IAAMA,EAAM,MAC5BG,EAAe,eACfE,EAAS,UACAL,GAAO,MAAQA,EAAM,IAC9BG,EAAe,UACfE,EAAS,QACAL,GAAO,IAAMA,EAAM,IAC5BG,EAAe,cACfE,EAAS,UACAL,GAAO,IAAMA,EAAM,IAC5BG,EAAe,oBACfE,EAAS,QACAL,GAAO,IAAMA,EAAM,IAC5BG,EAAe,kBACfE,EAAS,UACAL,EAAM,KACfG,EAAe,sBACfE,EAAS,UAKPQ,EAAS,WACbN,EAAa,cAAQX,EAAS,IAAQ,KAIlCkB,EAAS,WACbL,EAAa,cAAQb,EAAS,IAAQ,KAGxC,OACE,sBAAKmB,UAAU,MAAf,UAEE,sBAAKA,UAAU,kBAAf,UACE,oBAAIA,UAAU,QAAd,4CACA,sBAAKA,UAAU,OAAf,UACE,oBAAGA,UAAU,OAAb,yBAAgC,4BAAIf,EAAIgB,QAAQ,KAAhD,sCAA0F,4BAAId,IAA9F,yCACA,oBAAGa,UAAU,OAAb,kEAAyE,4BAAIT,EAAUU,QAAQ,KAA/F,OAA0G,4BAAIR,EAAUQ,QAAQ,KAAhI,iBACA,mBAAGD,UAAU,OAAb,gIAIJ,sBAAKA,UAAU,iBAAf,UACE,oBAAGA,UAAU,QAAb,2BAAmC,uCACnC,sBAAKA,UAAU,wBAAf,UACE,sBAAKA,UAAU,SAAf,UACE,mBAAGA,UAAU,OAAb,yBACA,uBAAOE,KAAK,SAASC,YAAY,MAAMC,MAAOvB,EAAQwB,SAnEtC,SAACC,GACzBxB,EAAUwB,EAAEC,OAAOH,aAoEb,sBAAKJ,UAAU,SAAf,UACE,mBAAGA,UAAU,OAAb,yBACA,uBAAOE,KAAK,SAASC,YAAY,KAAKC,MAAOrB,EAAQsB,SAnErC,SAACC,GACzBtB,EAAUsB,EAAEC,OAAOH,gBAqEf,sBAAKJ,UAAU,eAAf,UACE,mBAAGA,UAAU,OAAb,wCACA,oBAAIA,UAAU,MAAd,SAAqBf,EAAIgB,QAAQ,QAEnC,qBAAKD,UAAU,QAAf,SACE,qBAAKA,UAAU,QAAQQ,MAAO,CAAEC,OAAO,KAAD,OAAOpB,eCtFxCqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d463dd89.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.sass';\n\nfunction App() {\n  const [height, setHeight] = useState(175)\n  const [weight, setWeight] = useState(75)\n  const [bmi, setBMI] = useState(24.49)\n  const [bmiCategory, setBmiCategory] = useState()\n  const [chart, setChart] = useState()\n  const [minWeight, setMinWeight] = useState(56.7)\n  const [maxWeight, setMaxWeight] = useState(76.3)\n\n  useEffect(() => {\n    calculateBMI()\n    BMIcategory()\n    IBWmin()\n    IBWmax()\n  }, [bmi, height, weight, bmiCategory, chart])\n\n  const handleHeightInput = (e) => {\n    setHeight(e.target.value)\n  }\n\n  const handleWeightInput = (e) => {\n    setWeight(e.target.value)\n  }\n\n  const calculateBMI = () => {\n    setBMI(weight / (height / 100) ** 2)\n  }\n\n  const BMIcategory = () => {\n    if (bmi < 15) {\n      setBmiCategory('Very severly underweight')\n      setChart('12.5%')\n    } else if (bmi >= 15 && bmi < 16 ) {\n      setBmiCategory('Severly underweight')\n      setChart('25%')\n    } else if (bmi >= 16 && bmi < 18.5) {\n      setBmiCategory('Underweight')\n      setChart('37.5%')\n    } else if (bmi >= 18.5 && bmi < 25) {\n      setBmiCategory('Normal')\n      setChart('50%')\n    } else if (bmi >= 25 && bmi < 30) {\n      setBmiCategory('Overweight')\n      setChart('62.5%')\n    } else if (bmi >= 30 && bmi < 35) {\n      setBmiCategory('Moderately obese')\n      setChart('75%')\n    } else if (bmi >= 35 && bmi < 40) {\n      setBmiCategory('Severely obese')\n      setChart('87.5%')\n    } else if (bmi > 40) {\n      setBmiCategory('Very severly obese')\n      setChart('100%')\n    }\n  }\n\n  // Min ideal body weight\n  const IBWmin = () => {\n    setMinWeight(18.5 * (height / 100) ** 2 )\n  }\n\n  // Max ideal body weight\n  const IBWmax = () => {\n    setMaxWeight(24.9 * (height / 100) ** 2)\n  }\n\n  return (\n    <div className=\"app\">\n\n      <div className=\"outputContainer\">\n        <h1 className=\"title\">Calculate your Body Mass Index</h1>\n        <div className=\"body\">\n          <p className=\"text\">Your BMI is <b>{bmi.toFixed(2)}</b>, indicating your weight is in the <b>{bmiCategory}</b> category for adults of you height.</p>\n          <p className=\"text\">For your height, a normal weight range would be from <b>{minWeight.toFixed(2)}</b> to <b>{maxWeight.toFixed(2)}</b> kilograms.</p>\n          <p className=\"text\">Maintaining a healthy weight may reduce the risk of chronic diseases associated with overweight and obesity.</p>\n        </div>\n      </div>\n\n      <div className=\"inputContainer\">\n        <p className=\"title\">Find out your <b>BMI</b></p>\n        <div className=\"heightWeightContainer\">\n          <div className=\"height\">\n            <p className=\"text\">Height (cm)</p>\n            <input type=\"number\" placeholder=\"175\" value={height} onChange={handleHeightInput} />\n          </div>\n          <div className=\"weight\">\n            <p className=\"text\">Weight (kg)</p>\n            <input type=\"number\" placeholder=\"75\" value={weight} onChange={handleWeightInput} />\n          </div>\n        </div>\n        <div className=\"bmiContainer\">\n          <p className=\"text\">Your Body Mass Index (BMI)</p>\n          <h3 className=\"bmi\">{bmi.toFixed(2)}</h3>\n        </div>\n        <div className=\"chart\">\n          <div className=\"arrow\" style={{ margin: `0 ${chart}` }}></div>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}